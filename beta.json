{"meta":{"generator":"0.11.0","format":21,"date":1629073865607},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"<div align=\"center\">\n  <p>\n    <a href=\"https://nodei.co/npm/distube/\"><img src=\"https://nodei.co/npm/distube.png?downloads=true&downloadRank=true&stars=true\"></a>\n  </p>\n  <p>\n    <img alt=\"GitHub Workflow Status\" src=\"https://img.shields.io/github/workflow/status/skick1234/DisTube/Testing?label=Tests&logo=github&style=flat-square\">\n    <img alt=\"node-current\" src=\"https://img.shields.io/node/v/distube?logo=node.js&logoColor=white&style=flat-square\">\n    <img alt=\"npm peer dependency version\" src=\"https://img.shields.io/npm/dependency-version/distube/peer/discord.js?label=discord.js&logo=discord&logoColor=white&style=flat-square\">\n    <img alt=\"Depfu\" src=\"https://img.shields.io/depfu/skick1234/DisTube?style=flat-square\">\n    <img alt=\"Codecov branch\" src=\"https://img.shields.io/codecov/c/github/skick1234/DisTube/beta?logo=codecov&logoColor=white&style=flat-square&token=WWDYRRSEQW\">\n    <br>\n    <img alt=\"npm\" src=\"https://img.shields.io/npm/dt/distube?logo=npm&style=flat-square\">\n    <img alt=\"GitHub Repo stars\" src=\"https://img.shields.io/github/stars/skick1234/DisTube?logo=github&logoColor=white&style=flat-square\">\n    <img alt=\"Discord\" src=\"https://img.shields.io/discord/732254550689316914?logo=discord&logoColor=white&style=flat-square\">\n  </p>\n</div>\n\n# DisTube\n\nA Discord.js module to simplify your music commands and play songs with audio filters on Discord without any API key.\n\n[DisTube Support Server](https://discord.gg/feaDd9h) - [Frequently Asked Questions](https://discord.gg/feaDd9h)\n\n## Features\n\n- Build on `@discordjs/voice`\n- Easy to use and customize\n- Support YouTube, SoundCloud, Facebook, and [700+ more sites](https://ytdl-org.github.io/youtube-dl/supportedsites.html)\n- Audio filters (bassboost, nightcore, vaporwave,...)\n- Autoplay related songs\n- Plugin system to support more sites ([Plugin List](https://distube.js.org/#/docs/DisTube/beta/plugin/list))\n\n## Installation\n\n```npm\nnpm install distube@beta\n```\n\n### Requirement\n\n- Node v12 or higher\n- [discord.js](https://discord.js.org) v12 or **v13 _(Recommended)_**\n- [@discordjs/voice](https://github.com/discordjs/voice)\n- [FFmpeg](https://www.ffmpeg.org/download.html)\n- [@discordjs/opus](https://github.com/discordjs/opus)\n- [sodium](https://www.npmjs.com/package/sodium) or [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers)\n- [python](https://www.python.org/) _(Optional - For [`youtube-dl`](https://youtube-dl.org/) to support [700+ more sites](https://ytdl-org.github.io/youtube-dl/supportedsites.html).)_\n\n## Documentation\n\nRead DisTube's definitions, properties and events details in the [Documentation page](https://distube.js.org/).\n\n## Example Bot\n\n- [DisTube Bot](https://skick.xyz/DisTube) - A music bot with reaction controller, filters, DJ mode, user's custom playlist and voting.\n- [DisTube Example](https://github.com/distubejs/example) - Example bot with simple command handler.\n- [DisTube Guide](https://distube.js.org/guide) - How to build a music bot from scratch.\n\n## Dependencies\n\n- [node-ytdl-core](https://github.com/fent/node-ytdl-core): YouTube scraper ([DisTube Fork](https://github.com/distubejs/node-ytdl-core))\n- [node-ytsr](https://github.com/TimeForANinja/node-ytsr): YouTube search scraper ([DisTube Fork](https://github.com/distubejs/ytsr))\n- [node-ytpl](https://github.com/TimeForANinja/node-ytpl): YouTube playlist resolver ([DisTube Fork](https://github.com/distubejs/ytpl))\n- [youtube-dl-exec](https://github.com/microlinkhq/youtube-dl-exec): [`youtube-dl`](https://youtube-dl.org/) wrapper","path":"README.md"}}},"plugin":{"name":"Plugin","files":{"list":{"name":"Plugin List","type":"md","content":"# Official Plugin\n- [@distube/spotify](https://www.npmjs.com/package/@distube/spotify): Spotify custom plugin.\n- [@distube/soundcloud](https://www.npmjs.com/package/@distube/soundcloud): SoundCloud extractor plugin.","path":"pages/plugin/list.md"},"dev":{"name":"Plugin Development","type":"md","content":"# Plugin Development (WIP)\n- Plugins will provide data to DisTube for handling and playing song without having to edit the DisTube files to support other sites.\n\n## Extractor Plugin\n- Example: [@distube/soundcloud](https://www.npmjs.com/package/@distube/soundcloud)\n\n## Custom Plugin\n- Example: [@distube/spotify](https://www.npmjs.com/package/@distube/spotify)","path":"pages/plugin/dev.md"}}}},"classes":[{"name":"DisTube","description":"<p>DisTube class</p>","extends":[[["EventEmitter"]]],"construct":{"name":"DisTube","description":"<p>Create a new DisTube class.</p>","params":[{"name":"client","description":"<p>Discord.JS client</p>","type":[[["Discord","."],["Client"]]]},{"name":"otp","description":"<p>Custom DisTube options</p>","optional":true,"type":[[["DisTubeOptions"]]]}],"examples":["const Discord = require('discord.js'),\n    DisTube = require('distube'),\n    client = new Discord.Client();\n// Create a new DisTube\nconst distube = new DisTube.default(client, { searchSongs: 10 });\n// client.DisTube = distube // make it access easily\nclient.login(\"Your Discord Bot Token\")"]},"props":[{"name":"client","description":"<p>Discord.JS client</p>","type":[[["Discord","."],["Client"]]],"meta":{"line":71,"file":"DisTube.ts","path":"src"}},{"name":"voices","description":"<p>Voice connections manager</p>","type":[[["DisTubeVoiceManager"]]],"meta":{"line":77,"file":"DisTube.ts","path":"src"}},{"name":"options","description":"<p>DisTube options</p>","type":[[["DisTubeOptions"]]],"meta":{"line":82,"file":"DisTube.ts","path":"src"}},{"name":"handler","description":"<p>DisTube's Handler</p>","access":"private","type":[[["DisTubeHandler"]]],"meta":{"line":87,"file":"DisTube.ts","path":"src"}},{"name":"queues","description":"<p>Queues manager</p>","type":[[["QueueManager"]]],"meta":{"line":93,"file":"DisTube.ts","path":"src"}},{"name":"filters","description":"<p>DisTube filters</p>","type":[[["Filters"]]],"meta":{"line":98,"file":"DisTube.ts","path":"src"}},{"name":"extractorPlugins","description":"<p>Extractor Plugins</p>","access":"private","type":[[["Array","<"],["ExtractorPlugin",">"]]],"meta":{"line":136,"file":"DisTube.ts","path":"src"}},{"name":"customPlugins","description":"<p>Custom Plugins</p>","access":"private","type":[[["Array","<"],["CustomPlugin",">"]]],"meta":{"line":142,"file":"DisTube.ts","path":"src"}}],"methods":[{"name":"play","description":"<p>Shorthand method for {@link DisTube#playVoiceChannel}</p>","examples":["client.on('message', (message) => {\n    if (!message.content.startsWith(config.prefix)) return;\n    const args = message.content.slice(config.prefix.length).trim().split(/ +/g);\n    const command = args.shift();\n    if (command == \"play\")\n        distube.play(message, args.join(\" \"));\n});"],"params":[{"name":"message","description":"<p>A message from guild channel</p>","type":[[["Discord","."],["Message"]]]},{"name":"song","description":"<p>YouTube url | Search string | {@link Song} | {@link SearchResult} | {@link Playlist}</p>","type":[[["string"]],[["Song"]],[["SearchResult"]],[["Playlist"]]]},{"name":"options","description":"<p>Optional options</p>","optional":true,"type":[[["Object"]]]},{"name":"options.skip","description":"<p>Skip the playing song (if exists) and play the added song/playlist instantly</p>","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.unshift","description":"<p>Add the song/playlist to the beginning of the queue (after the playing song if exists)</p>","optional":true,"default":false,"type":[[["boolean"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":150,"file":"DisTube.ts","path":"src"}},{"name":"playVoiceChannel","description":"<p>Play / add a song or playlist from url. Search and play a song if it is not a valid url.\nEmit {@link DisTube#addList}, {@link DisTube#addSong} or {@link DisTube#playSong} after executing</p>","params":[{"name":"voiceChannel","description":"<p>The voice channel will be joined</p>","type":[[["Discord","."],["VoiceChannel"]],[["Discord","."],["StageChannel"]]]},{"name":"song","description":"<p>YouTube url | Search string | {@link Song} | {@link SearchResult} | {@link Playlist}</p>","type":[[["string"]],[["Song"]],[["SearchResult"]],[["Playlist"]]]},{"name":"options","description":"<p>Optional options</p>","optional":true,"type":[[["Object"]]]},{"name":"options.skip","description":"<p>Skip the playing song (if exists) and play the added song/playlist instantly</p>","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.unshift","description":"<p>Add the song/playlist to the beginning of the queue (after the playing song if exists)</p>","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.member","description":"<p>Requested user (default is your bot)</p>","optional":true,"type":[[["Discord","."],["GuildMember"]]]},{"name":"options.textChannel","description":"<p>Default {@link Queue#textChannel} (if the queue wasn't created)</p>","optional":true,"type":[[["Discord","."],["TextChannel"]]]},{"name":"options.message","description":"<p>Called message (For built-in search events. If this is a {@link https://developer.mozilla.org/en-US/docs/Glossary/Falsy|falsy value}, it will play the first result instead)</p>","optional":true,"type":[[["Discord","."],["Message"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":191,"file":"DisTube.ts","path":"src"}},{"name":"playCustomPlaylist","description":"<p>Play or add array of video urls.\n{@link DisTube#event:playSong} or {@link DisTube#event:addList} will be emitted\nwith <code>playlist</code>'s properties include <code>properties</code> parameter's properties such as\n<code>user</code>, <code>songs</code>, <code>duration</code>, <code>formattedDuration</code>, <code>thumbnail</code> like {@link Playlist}</p>","examples":["let songs = [\"https://www.youtube.com/watch?v=xxx\", \"https://www.youtube.com/watch?v=yyy\"];\n    distube.playCustomPlaylist(message, songs, { name: \"My playlist name\" });\n    // Fetching custom playlist sequentially (reduce lag for low specs)\n    distube.playCustomPlaylist(message, songs, { name: \"My playlist name\" }, false, false);"],"params":[{"name":"message","description":"<p>A message from guild channel</p>","type":[[["Discord","."],["Message"]]]},{"name":"songs","description":"<p>Array of url, Song or SearchResult</p>","type":[[["Array","<"],["string","|"],["Song","|"],["SearchResult",">"]]]},{"name":"properties","description":"<p>Additional properties such as <code>name</code></p>","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options","description":"<p>Optional options</p>","optional":true,"type":[[["Object"]]]},{"name":"options.skip","description":"<p>Skip the playing song (if exists) and play the added song/playlist instantly</p>","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.unshift","description":"<p>Add the song/playlist to the beginning of the queue (after the playing song if exists)</p>","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.parallel","description":"<p>Whether or not fetch the songs in parallel</p>","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":282,"file":"DisTube.ts","path":"src"}},{"name":"search","description":"<p>Search for a song.\nYou can customize how user answers instead of send a number.\nThen use {@link DisTube#play} or {@link DisTube#playSkip} to play it.</p>","params":[{"name":"string","description":"<p>The string search for</p>","type":[[["string"]]]},{"name":"options","description":"<p>Search options</p>","type":[[["Object"]]]},{"name":"options.limit","description":"<p>Limit the results</p>","optional":true,"default":10,"type":[[["number"]]]},{"name":"options.type","description":"<p>Type of results (<code>video</code> or <code>playlist</code>).</p>","optional":true,"default":"'video'","type":[[["'video","'"]],[["'playlist","'"]]]},{"name":"options.safeSearch","description":"<p>Whether or not use safe search (YouTube restricted mode)</p>","optional":true,"default":false,"type":[[["boolean"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Array","<"],["SearchResult",">>"]]],"description":"<p>Array of results</p>"},"meta":{"line":333,"file":"DisTube.ts","path":"src"}},{"name":"getQueue","description":"<p>Get the guild queue</p>","examples":["client.on('message', (message) => {\n    if (!message.content.startsWith(config.prefix)) return;\n    const args = message.content.slice(config.prefix.length).trim().split(/ +/g);\n    const command = args.shift();\n    if (command == \"queue\") {\n        const queue = distube.getQueue(message);\n        message.channel.send('Current queue:\\n' + queue.songs.map((song, id) =>\n            `**${id+1}**. [${song.name}](${song.url}) - \\`${song.formattedDuration}\\``\n        ).join(\"\\n\"));\n    }\n});"],"params":[{"name":"queue","description":"<p>The type can be resolved to give a {@link Queue}</p>","type":[[["GuildIDResolvable"]]]}],"returns":{"types":[[["Queue"]]],"nullable":true},"meta":{"line":371,"file":"DisTube.ts","path":"src"}},{"name":"pause","description":"<p>Pause the guild stream</p>","params":[{"name":"queue","description":"<p>The type can be resolved to give a {@link Queue}</p>","type":[[["GuildIDResolvable"]]]}],"returns":{"types":[[["Queue"]]],"description":"<p>The guild queue</p>"},"meta":{"line":393,"file":"DisTube.ts","path":"src"}},{"name":"resume","description":"<p>Resume the guild stream</p>","params":[{"name":"queue","description":"<p>The type can be resolved to give a {@link Queue}</p>","type":[[["GuildIDResolvable"]]]}],"returns":{"types":[[["Queue"]]],"description":"<p>The guild queue</p>"},"meta":{"line":405,"file":"DisTube.ts","path":"src"}},{"name":"stop","description":"<p>Stop the guild stream</p>","examples":["client.on('message', (message) => {\n    if (!message.content.startsWith(config.prefix)) return;\n    const args = message.content.slice(config.prefix.length).trim().split(/ +/g);\n    const command = args.shift();\n    if (command == \"stop\") {\n        distube.stop(message);\n        message.channel.send(\"Stopped the queue!\");\n    }\n});"],"params":[{"name":"queue","description":"<p>The type can be resolved to give a {@link Queue}</p>","type":[[["GuildIDResolvable"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":417,"file":"DisTube.ts","path":"src"}},{"name":"setVolume","description":"<p>Set the guild stream's volume</p>","examples":["client.on('message', (message) => {\n    if (!message.content.startsWith(config.prefix)) return;\n    const args = message.content.slice(config.prefix.length).trim().split(/ +/g);\n    const command = args.shift();\n    if (command == \"volume\")\n        distube.setVolume(message, Number(args[0]));\n});"],"params":[{"name":"queue","description":"<p>The type can be resolved to give a {@link Queue}</p>","type":[[["GuildIDResolvable"]]]},{"name":"percent","description":"<p>The percentage of volume you want to set</p>","type":[[["number"]]]}],"returns":{"types":[[["Queue"]]],"description":"<p>The guild queue</p>"},"meta":{"line":439,"file":"DisTube.ts","path":"src"}},{"name":"skip","description":"<p>Skip the playing song</p>","examples":["client.on('message', (message) => {\n    if (!message.content.startsWith(config.prefix)) return;\n    const args = message.content.slice(config.prefix.length).trim().split(/ +/g);\n    const command = args.shift();\n    if (command == \"skip\")\n        distube.skip(message);\n});"],"params":[{"name":"queue","description":"<p>The type can be resolved to give a {@link Queue}</p>","type":[[["GuildIDResolvable"]]]}],"returns":{"types":[[["Promise","<"],["Song",">"]]],"description":"<p>The new Song will be played</p>"},"meta":{"line":460,"file":"DisTube.ts","path":"src"}},{"name":"previous","description":"<p>Play the previous song</p>","examples":["client.on('message', (message) => {\n    if (!message.content.startsWith(config.prefix)) return;\n    const args = message.content.slice(config.prefix.length).trim().split(/ +/g);\n    const command = args.shift();\n    if (command == \"previous\")\n        distube.previous(message);\n});"],"params":[{"name":"queue","description":"<p>The type can be resolved to give a {@link Queue}</p>","type":[[["GuildIDResolvable"]]]}],"returns":{"types":[[["Promise","<"],["Song",">"]]],"description":"<p>The new Song will be played</p>"},"meta":{"line":480,"file":"DisTube.ts","path":"src"}},{"name":"shuffle","description":"<p>Shuffle the guild queue songs</p>","examples":["client.on('message', (message) => {\n    if (!message.content.startsWith(config.prefix)) return;\n    const args = message.content.slice(config.prefix.length).trim().split(/ +/g);\n    const command = args.shift();\n    if (command == \"shuffle\")\n        distube.shuffle(message);\n});"],"params":[{"name":"queue","description":"<p>The type can be resolved to give a {@link Queue}</p>","type":[[["GuildIDResolvable"]]]}],"returns":{"types":[[["Promise","<"],["Queue",">"]]],"description":"<p>The guild queue</p>"},"meta":{"line":500,"file":"DisTube.ts","path":"src"}},{"name":"jump","description":"<p>Jump to the song number in the queue.\nThe next one is 1, 2,...\nThe previous one is -1, -2,...</p>","examples":["client.on('message', (message) => {\n    if (!message.content.startsWith(config.prefix)) return;\n    const args = message.content.slice(config.prefix.length).trim().split(/ +/g);\n    const command = args.shift();\n    if (command == \"jump\")\n        distube.jump(message, parseInt(args[0]))\n            .catch(err => message.channel.send(\"Invalid song number.\"));\n});"],"params":[{"name":"queue","description":"<p>The type can be resolved to give a {@link Queue}</p>","type":[[["GuildIDResolvable"]]]},{"name":"num","description":"<p>The song number to play</p>","type":[[["number"]]]}],"returns":{"types":[[["Promise","<"],["Queue",">"]]],"description":"<p>The guild queue</p>"},"meta":{"line":519,"file":"DisTube.ts","path":"src"}},{"name":"setRepeatMode","description":"<p>Set the repeat mode of the guild queue.\nTurn off if repeat mode is the same value as new mode.\nToggle mode <code>(0 -&gt; 1 -&gt; 2 -&gt; 0...)</code>: <code>mode</code> is <code>undefined</code></p>","examples":["client.on('message', (message) => {\n    if (!message.content.startsWith(config.prefix)) return;\n    const args = message.content.slice(config.prefix.length).trim().split(/ +/g);\n    const command = args.shift();\n    if (command == \"repeat\") {\n        let mode = distube.setRepeatMode(message, parseInt(args[0]));\n        mode = mode ? mode == 2 ? \"Repeat queue\" : \"Repeat song\" : \"Off\";\n        message.channel.send(\"Set repeat mode to `\" + mode + \"`\");\n    }\n});"],"params":[{"name":"queue","description":"<p>The type can be resolved to give a {@link Queue}</p>","type":[[["GuildIDResolvable"]]]},{"name":"mode","description":"<p>The repeat modes <code>(0: disabled, 1: Repeat a song, 2: Repeat all the queue)</code></p>","optional":true,"nullable":true,"type":[[["number"]]]}],"returns":{"types":[[["number"]]],"description":"<p>The new repeat mode</p>"},"meta":{"line":543,"file":"DisTube.ts","path":"src"}},{"name":"toggleAutoplay","description":"<p>Toggle autoplay mode</p>","examples":["client.on('message', (message) => {\n    if (!message.content.startsWith(config.prefix)) return;\n    const args = message.content.slice(config.prefix.length).trim().split(/ +/g);\n    const command = args.shift();\n    if (command == \"autoplay\") {\n        let mode = distube.toggleAutoplay(message);\n        message.channel.send(\"Set autoplay mode to `\" + (mode ? \"On\" : \"Off\") + \"`\");\n    }\n});"],"params":[{"name":"queue","description":"<p>The type can be resolved to give a {@link Queue}</p>","type":[[["GuildIDResolvable"]]]}],"returns":{"types":[[["boolean"]]],"description":"<p>Autoplay mode state</p>"},"meta":{"line":568,"file":"DisTube.ts","path":"src"}},{"name":"addRelatedSong","description":"<p>Add related song to the queue</p>","params":[{"name":"queue","description":"<p>The type can be resolved to give a {@link Queue}</p>","type":[[["GuildIDResolvable"]]]}],"returns":{"types":[[["Promise","<"],["Song",">"]]],"description":"<p>The guild queue</p>"},"meta":{"line":591,"file":"DisTube.ts","path":"src"}},{"name":"setFilter","description":"<p>Enable or disable filter(s) of the queue.\nAvailable filters: {@link Filters}</p>","examples":["client.on('message', (message) => {\n    if (!message.content.startsWith(config.prefix)) return;\n    const args = message.content.slice(config.prefix.length).trim().split(/ +/g);\n    const command = args.shift();\n    if ([`3d`, `bassboost`, `echo`, `karaoke`, `nightcore`, `vaporwave`].includes(command)) {\n        let filter = distube.setFilter(message, command);\n        message.channel.send(\"Current queue filter: \" + (filter.join(\", \") || \"Off\"));\n    }\n});"],"params":[{"name":"queue","description":"<p>The type can be resolved to give a {@link Queue}</p>","type":[[["GuildIDResolvable"]]]},{"name":"filter","description":"<p>A filter name, <code>false</code> to clear all the filters</p>","type":[[["string"]],[["false"]]]},{"name":"force","description":"<p>Force enable the input filter(s) even if it's enabled</p>","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":{"types":[[["Array","<"],["string",">"]]],"description":"<p>Enabled filters.</p>"},"meta":{"line":602,"file":"DisTube.ts","path":"src"}},{"name":"seek","description":"<p>Set the playing time to another position</p>","examples":["client.on('message', message => {\n    if (!message.content.startsWith(config.prefix)) return;\n    const args = message.content.slice(config.prefix.length).trim().split(/ +/g);\n    const command = args.shift();\n    if (command = 'seek')\n        distube.seek(message, Number(args[0]));\n});"],"params":[{"name":"queue","description":"<p>The type can be resolved to give a {@link Queue}</p>","type":[[["GuildIDResolvable"]]]},{"name":"time","description":"<p>Time in seconds</p>","type":[[["number"]]]}],"returns":{"types":[[["Queue"]]],"description":"<p>Seeked queue</p>"},"meta":{"line":626,"file":"DisTube.ts","path":"src"}},{"name":"emitError","description":"<p>Emit error event</p>","access":"private","params":[{"name":"error","description":"<p>error</p>","type":[[["Error"]]]},{"name":"channel","description":"<p>Text channel where the error is encountered.</p>","nullable":true,"type":[[["Discord","."],["TextChannel"]]]}],"meta":{"line":647,"file":"DisTube.ts","path":"src"}}],"events":[{"name":"addList","description":"<p>Emitted after DisTube add a new playlist to the playing {@link Queue}</p>","examples":["distube.on(\"addList\", (queue, playlist) => queue.textChannel.send(\n    `Added \\`${playlist.name}\\` playlist (${playlist.songs.length} songs) to the queue!`\n));"],"params":[{"name":"queue","description":"<p>The guild queue</p>","type":[[["Queue"]]]},{"name":"playlist","description":"<p>Playlist info</p>","type":[[["Playlist"]]]}],"meta":{"line":672,"file":"DisTube.ts","path":"src"}},{"name":"addSong","description":"<p>Emitted after DisTube add a new song to the playing {@link Queue}</p>","examples":["distube.on(\"addSong\", (queue, song) => queue.textChannel.send(\n    `Added ${song.name} - \\`${song.formattedDuration}\\` to the queue by ${song.user}.`\n));"],"params":[{"name":"queue","description":"<p>The guild queue</p>","type":[[["Queue"]]]},{"name":"song","description":"<p>Added song</p>","type":[[["Song"]]]}],"meta":{"line":684,"file":"DisTube.ts","path":"src"}},{"name":"empty","description":"<p>Emitted when there is no user in the voice channel, {@link DisTubeOptions}.leaveOnEmpty is <code>true</code> and there is a playing queue.\nIf there is no playing queue (stopped and {@link DisTubeOptions}.leaveOnStop is <code>false</code>), it will leave the channel without emitting this event.</p>","examples":["distube.on(\"empty\", queue => queue.textChannel.send(\"Channel is empty. Leaving the channel\"))"],"params":[{"name":"queue","description":"<p>The guild queue</p>","type":[[["Queue"]]]}],"meta":{"line":696,"file":"DisTube.ts","path":"src"}},{"name":"error","description":"<p>Emitted when {@link DisTube} encounters an error.</p>","examples":["distube.on(\"error\", (channel, error) => channel.send(\n    \"An error encountered: \" + error\n));"],"params":[{"name":"channel","description":"<p>Text channel where the error is encountered.</p>","type":[[["Discord","."],["TextChannel"]]]},{"name":"error","description":"<p>The error encountered</p>","type":[[["Error"]]]}],"meta":{"line":706,"file":"DisTube.ts","path":"src"}},{"name":"finish","description":"<p>Emitted when there is no more song in the queue and {@link Queue#autoplay} is <code>false</code>.\nDisTube will leave voice channel if {@link DisTubeOptions}.leaveOnFinish is <code>true</code></p>","examples":["distube.on(\"finish\", queue => queue.textChannel.send(\"No more song in queue\"));"],"params":[{"name":"queue","description":"<p>The guild queue</p>","type":[[["Queue"]]]}],"meta":{"line":718,"file":"DisTube.ts","path":"src"}},{"name":"initQueue","description":"<p>Emitted when DisTube initialize a queue to change queue default properties.</p>","examples":["distube.on(\"initQueue\", queue => {\n    queue.autoplay = false;\n    queue.volume = 100;\n});"],"params":[{"name":"queue","description":"<p>The guild queue</p>","type":[[["Queue"]]]}],"meta":{"line":728,"file":"DisTube.ts","path":"src"}},{"name":"noRelated","description":"<p>Emitted when {@link Queue#autoplay} is <code>true</code>, the {@link Queue#songs} is empty and\nDisTube cannot find related songs to play</p>","examples":["distube.on(\"noRelated\", queue => queue.textChannel.send(\"Can't find related video to play.\"));"],"params":[{"name":"queue","description":"<p>The guild queue</p>","type":[[["Queue"]]]}],"meta":{"line":740,"file":"DisTube.ts","path":"src"}},{"name":"playSong","description":"<p>Emitted when DisTube play a song.\nIf {@link DisTubeOptions}.emitNewSongOnly is <code>true</code>, event is not emitted when looping a song or next song is the previous one</p>","examples":["const status = (queue) => `Volume: \\`${queue.volume}%\\` | Loop: \\`${queue.repeatMode ? queue.repeatMode == 2 ? \"Server Queue\" : \"This Song\" : \"Off\"}\\` | Autoplay: \\`${queue.autoplay ? \"On\" : \"Off\"}\\``;\ndistube.on(\"playSong\", (queue, song) => queue.textChannel.send(\n    `Playing \\`${song.name}\\` - \\`${song.formattedDuration}\\`\\nRequested by: ${song.user}\\n${status(queue)}`\n));"],"params":[{"name":"queue","description":"<p>The guild queue</p>","type":[[["Queue"]]]},{"name":"song","description":"<p>Playing song</p>","type":[[["Song"]]]}],"meta":{"line":750,"file":"DisTube.ts","path":"src"}},{"name":"searchNoResult","description":"<p>Emitted when DisTube cannot find any results for the query</p>","examples":["distube.on(\"searchNoResult\", (message, query) => message.channel.send(`No result found for ${query}!`));"],"params":[{"name":"message","description":"<p>The user message called play method</p>","type":[[["Discord","."],["Message"]]]},{"name":"query","description":"<p>The search query</p>","type":[[["string"]]]}],"meta":{"line":764,"file":"DisTube.ts","path":"src"}},{"name":"searchResult","description":"<p>Emitted when {@link DisTubeOptions|DisTubeOptions.searchSongs} bigger than 0\nand song param of {@link DisTube#play|play()} is invalid url.\nDisTube will wait for user's next message to choose song manually.\n<info>{@link https://support.google.com/youtube/answer/7354993|Safe search} is enabled\nif {@link DisTubeOptions}.nsfw is disabled and the message's channel is not a nsfw channel.</info></p>","examples":["// DisTubeOptions.searchSongs > 0\ndistube.on(\"searchResult\", (message, results) => {\n    message.channel.send(`**Choose an option from below**\\n${results.map((song, i) => `**${i + 1}**. ${song.name} - \\`${song.formattedDuration}\\``).join(\"\\n\")}\\n*Enter anything else or wait 60 seconds to cancel*`);\n});"],"params":[{"name":"message","description":"<p>The user message called play method</p>","type":[[["Discord","."],["Message"]]]},{"name":"results","description":"<p>Searched results</p>","type":[[["Array","<"],["SearchResult",">"]]]},{"name":"query","description":"<p>The search query</p>","type":[[["string"]]]}],"meta":{"line":774,"file":"DisTube.ts","path":"src"}},{"name":"searchCancel","description":"<p>Emitted when {@link DisTubeOptions|DisTubeOptions.searchSongs} bigger than 0\nand the search canceled due to {@link DisTubeOptions|DisTubeOptions.searchTimeout}</p>","examples":["// DisTubeOptions.searchSongs > 0\ndistube.on(\"searchCancel\", (message) => message.channel.send(`Searching canceled`));"],"params":[{"name":"message","description":"<p>The user message called play method</p>","type":[[["Discord","."],["Message"]]]},{"name":"query","description":"<p>The search query</p>","type":[[["string"]]]}],"meta":{"line":792,"file":"DisTube.ts","path":"src"}},{"name":"searchInvalidAnswer","description":"<p>Emitted when {@link DisTubeOptions|DisTubeOptions.searchSongs} bigger than 0\nand the search canceled due to user's next message is not a number or out of results range</p>","examples":["// DisTubeOptions.searchSongs > 0\ndistube.on(\"searchInvalidAnswer\", (message) => message.channel.send(`You answered an invalid number!`));"],"params":[{"name":"message","description":"<p>The user message called play method</p>","type":[[["Discord","."],["Message"]]]},{"name":"answer","description":"<p>The answered message of user</p>","type":[[["Discord","."],["Message"]]]},{"name":"query","description":"<p>The search query</p>","type":[[["string"]]]}],"meta":{"line":804,"file":"DisTube.ts","path":"src"}},{"name":"searchDone","description":"<p>Emitted when {@link DisTubeOptions|DisTubeOptions.searchSongs} bigger than 0\nand after the user chose a search result to play</p>","params":[{"name":"message","description":"<p>The user message called play method</p>","type":[[["Discord","."],["Message"]]]},{"name":"answer","description":"<p>The answered message of user</p>","type":[[["Discord","."],["Message"]]]},{"name":"query","description":"<p>The search query</p>","type":[[["string"]]]}],"meta":{"line":817,"file":"DisTube.ts","path":"src"}},{"name":"disconnect","description":"<p>Emitted when the bot is disconnected to the voice channel</p>","params":[{"name":"queue","description":"<p>The guild queue</p>","type":[[["Queue"]]]}],"meta":{"line":827,"file":"DisTube.ts","path":"src"}},{"name":"deleteQueue","description":"<p>Emitted when a {@link Queue} is deleted with any reasons.</p>","params":[{"name":"queue","description":"<p>The guild queue</p>","type":[[["Queue"]]]}],"meta":{"line":834,"file":"DisTube.ts","path":"src"}},{"name":"finishSong","description":"<p>Emitted when DisTube finished a song</p>","params":[{"name":"queue","description":"<p>The guild queue</p>","type":[[["Queue"]]]},{"name":"song","description":"<p>Finished song</p>","type":[[["Song"]]]}],"meta":{"line":841,"file":"DisTube.ts","path":"src"}}],"meta":{"line":49,"file":"DisTube.ts","path":"src"}},{"name":"DisTubeBase","access":"private","props":[{"name":"distube","description":"<p>DisTube</p>","access":"private","type":[[["DisTube"]]],"meta":{"line":8,"file":"DisTubeBase.ts","path":"src/core"}},{"name":"queues","description":"<p>The queue manager</p>","access":"private","readonly":true,"type":[[["QueueManager"]]],"meta":{"line":34,"file":"DisTubeBase.ts","path":"src/core"}},{"name":"voices","description":"<p>The voice manager</p>","access":"private","readonly":true,"type":[[["DisTubeVoiceManager"]]],"meta":{"line":43,"file":"DisTubeBase.ts","path":"src/core"}},{"name":"client","description":"<p>Discord.js client</p>","access":"private","readonly":true,"type":[[["Discord","."],["Client"]]],"meta":{"line":52,"file":"DisTubeBase.ts","path":"src/core"}},{"name":"options","description":"<p>DisTube options</p>","access":"private","readonly":true,"type":[[["DisTubeOptions"]]],"meta":{"line":61,"file":"DisTubeBase.ts","path":"src/core"}},{"name":"handler","description":"<p>DisTube handler</p>","access":"private","readonly":true,"type":[[["DisTubeHandler"]]],"meta":{"line":70,"file":"DisTubeBase.ts","path":"src/core"}}],"methods":[{"name":"emit","description":"<p>Emit the {@link DisTube} of this base</p>","access":"private","params":[{"name":"eventName","description":"<p>Event name</p>","type":[[["string"]]]},{"name":"args","description":"<p>arguments</p>","variable":true,"type":[[["any"]]]}],"returns":[[["boolean"]]],"meta":{"line":15,"file":"DisTubeBase.ts","path":"src/core"}},{"name":"emitError","description":"<p>Emit error event</p>","access":"private","params":[{"name":"error","description":"<p>error</p>","type":[[["Error"]]]},{"name":"channel","description":"<p>Text channel where the error is encountered.</p>","nullable":true,"type":[[["Discord","."],["TextChannel"]]]}],"meta":{"line":25,"file":"DisTubeBase.ts","path":"src/core"}}],"meta":{"line":11,"file":"DisTubeBase.ts","path":"src/core"}},{"name":"DisTubeHandler","description":"<p>DisTube's Handler</p>","extends":[[["DisTubeBase"]]],"access":"private","props":[{"name":"distube","description":"<p>DisTube</p>","access":"private","type":[[["DisTube"]]],"meta":{"line":8,"file":"DisTubeBase.ts","path":"src/core"}},{"name":"queues","description":"<p>The queue manager</p>","access":"private","readonly":true,"type":[[["QueueManager"]]],"meta":{"line":34,"file":"DisTubeBase.ts","path":"src/core"}},{"name":"voices","description":"<p>The voice manager</p>","access":"private","readonly":true,"type":[[["DisTubeVoiceManager"]]],"meta":{"line":43,"file":"DisTubeBase.ts","path":"src/core"}},{"name":"client","description":"<p>Discord.js client</p>","access":"private","readonly":true,"type":[[["Discord","."],["Client"]]],"meta":{"line":52,"file":"DisTubeBase.ts","path":"src/core"}},{"name":"options","description":"<p>DisTube options</p>","access":"private","readonly":true,"type":[[["DisTubeOptions"]]],"meta":{"line":61,"file":"DisTubeBase.ts","path":"src/core"}},{"name":"handler","description":"<p>DisTube handler</p>","access":"private","readonly":true,"type":[[["DisTubeHandler"]]],"meta":{"line":70,"file":"DisTubeBase.ts","path":"src/core"}}],"methods":[{"name":"createQueue","description":"<p>Create a new guild queue</p>","params":[{"name":"message","description":"<p>A message from guild channel | a voice channel</p>","type":[[["Discord","."],["Message"]],[["Discord","."],["VoiceChannel"]],[["Discord","."],["StageChannel"]]]},{"name":"song","description":"<p>Song to play</p>","type":[[["Song"]],[["Array","<"],["Song",">"]]]},{"name":"textChannel","description":"<p>A text channel of the queue</p>","type":[[["Discord","."],["TextChannel"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Queue","|"],["true",">"]]],"description":"<p><code>true</code> if queue is not generated</p>"},"meta":{"line":40,"file":"DisTubeHandler.ts","path":"src/core"}},{"name":"getYouTubeInfo","params":[{"name":"url","description":"<p>url</p>","type":[[["string"]]]},{"name":"basic","description":"<p>getBasicInfo?</p>","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["ytdl","."],["videoInfo",">"]]],"meta":{"line":59,"file":"DisTubeHandler.ts","path":"src/core"}},{"name":"resolveSong","description":"<p>Resolve a Song</p>","params":[{"name":"member","description":"<p>Requested user</p>","type":[[["Discord","."],["GuildMember"]]]},{"name":"song","description":"<p>URL | Search string | {@link Song}</p>","type":[[["string"]],[["Song"]],[["SearchResult"]],[["Playlist"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Song","|"],["Playlist","|"],["null",">"]]],"description":"<p>Resolved</p>"},"meta":{"line":69,"file":"DisTubeHandler.ts","path":"src/core"}},{"name":"resolvePlaylist","description":"<p>Resole Song[] or url to a Playlist</p>","params":[{"name":"member","description":"<p>Requested user</p>","type":[[["Discord","."],["GuildMember"]]]},{"name":"playlist","description":"<p>Resolvable playlist</p>","type":[[["Array","<"],["Song",">"]],[["string"]]]},{"name":"source","description":"<p>Playlist source</p>","optional":true,"default":"\"youtube\"","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["Playlist",">"]]],"meta":{"line":96,"file":"DisTubeHandler.ts","path":"src/core"}},{"name":"createCustomPlaylist","description":"<p>Create a custom playlist</p>","params":[{"name":"message","description":"<p>A message from guild channel | A guild member</p>","type":[[["Discord","."],["Message"]],[["Discord","."],["GuildMember"]]]},{"name":"songs","description":"<p>Array of url, Song or SearchResult</p>","type":[[["Array","<"],["string","|"],["Song","|"],["SearchResult",">"]]]},{"name":"properties","description":"<p>Additional properties such as <code>name</code></p>","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"parallel","description":"<p>Whether or not fetch the songs in parallel</p>","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[["Promise","<"],["Playlist",">"]]],"meta":{"line":121,"file":"DisTubeHandler.ts","path":"src/core"}},{"name":"handlePlaylist","description":"<p>Play / add a playlist</p>","params":[{"name":"message","description":"<p>A message from guild channel | a voice channel</p>","type":[[["Discord","."],["Message"]],[["Discord","."],["VoiceChannel"]],[["Discord","."],["StageChannel"]]]},{"name":"playlist","description":"<p>A YouTube playlist url | a Playlist</p>","type":[[["Playlist"]],[["string"]]]},{"name":"textChannel","description":"<p>The default text channel of the queue</p>","optional":true,"type":[[["Discord","."],["TextChannel"]],[["boolean"]]]},{"name":"skip","description":"<p>Skip the playing song (if exists) and play the added playlist instantly</p>","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"unshift","description":"<p>Add the playlist to the beginning of the queue (after the playing song if exists)</p>","optional":true,"default":false,"type":[[["boolean"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":158,"file":"DisTubeHandler.ts","path":"src/core"}},{"name":"searchSong","description":"<p>Search for a song, fire {@link DisTube#event:error} if not found.</p>","params":[{"name":"message","description":"<p>A message from guild channel</p>","type":[[["Discord","."],["Message"]]]},{"name":"query","description":"<p>The query string</p>","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<?"],["SearchResult",">"]]],"description":"<p>Song info</p>"},"meta":{"line":195,"file":"DisTubeHandler.ts","path":"src/core"}},{"name":"createStream","description":"<p>Create a ytdl stream</p>","params":[{"name":"queue","description":"<p>Queue</p>","type":[[["Queue"]]]}],"returns":[[["DisTubeStream"]]],"meta":{"line":262,"file":"DisTubeHandler.ts","path":"src/core"}},{"name":"emit","description":"<p>Emit the {@link DisTube} of this base</p>","access":"private","inherits":"DisTubeBase#emit","inherited":true,"params":[{"name":"eventName","description":"<p>Event name</p>","type":[[["string"]]]},{"name":"args","description":"<p>arguments</p>","variable":true,"type":[[["any"]]]}],"returns":[[["boolean"]]],"meta":{"line":15,"file":"DisTubeBase.ts","path":"src/core"}},{"name":"emitError","description":"<p>Emit error event</p>","access":"private","inherits":"DisTubeBase#emitError","inherited":true,"params":[{"name":"error","description":"<p>error</p>","type":[[["Error"]]]},{"name":"channel","description":"<p>Text channel where the error is encountered.</p>","nullable":true,"type":[[["Discord","."],["TextChannel"]]]}],"meta":{"line":25,"file":"DisTubeBase.ts","path":"src/core"}}],"meta":{"line":17,"file":"DisTubeHandler.ts","path":"src/core"}},{"name":"Options","construct":{"name":"Options","description":"<p>Whether or not emitting <code>addSong</code> event when creating a new Queue</p>"},"meta":{"line":52,"file":"DisTubeOptions.ts","path":"src/core"}},{"name":"DisTubeStream","construct":{"name":"DisTubeStream","description":"<p>Create a DisTubeStream to play with {@link DisTubeVoice}</p>","params":[{"name":"url","description":"<p>Stream URL</p>","type":[[["string"]]]},{"name":"options","description":"<p>Stream options</p>","type":[[["StreamOptions"]]]}]},"methods":[{"name":"YouTube","description":"<p>Create a stream from ytdl video formats</p>","scope":"static","params":[{"name":"formats","description":"<p>ytdl video formats</p>","type":[[["Array","<"],["ytdl","."],["videoFormat",">"]]]},{"name":"options","description":"<p>options</p>","type":[[["StreamOptions"]]]}],"returns":[["*"]],"meta":{"line":46,"file":"DisTubeStream.ts","path":"src/core"}},{"name":"DirectLink","description":"<p>Create a stream from a stream url</p>","scope":"static","params":[{"name":"url","description":"<p>stream url</p>","type":[[["string"]]]},{"name":"options","description":"<p>options</p>","type":[[["StreamOptions"]]]}],"returns":[[["Readable"]],[["string"]]],"meta":{"line":61,"file":"DisTubeStream.ts","path":"src/core"}}],"meta":{"line":79,"file":"DisTubeStream.ts","path":"src/core"}},{"name":"CustomPlugin","description":"<p>Custom Plugin</p>","extends":[[["Plugin"]]],"construct":{"name":"CustomPlugin","description":"<p>Create a custom plugin</p>"},"props":[{"name":"type","description":"<p>Type of the plugin</p>","type":[[["\"custom","\""]],[["\"extractor","\""]]],"meta":{"line":14,"file":"Plugin.ts","path":"src/struct"}},{"name":"distube","description":"<p>DisTube</p>","type":[[["DisTube"]]],"meta":{"line":21,"file":"Plugin.ts","path":"src/struct"}},{"name":"handler","description":"<p>Handler</p>","type":[[["DisTubeHandler"]]],"meta":{"line":26,"file":"Plugin.ts","path":"src/struct"}}],"methods":[{"name":"play","description":"<p>Execute if the url is validated</p>","params":[{"name":"voiceChannel","description":"<p>The voice channel will be joined</p>","type":[[["Discord","."],["VoiceChannel"]],[["Discord","."],["StageChannel"]]]},{"name":"url","description":"<p>Validated url</p>","type":[[["string"]]]},{"name":"member","description":"<p>Requested user</p>","type":[[["Discord","."],["GuildMember"]]]},{"name":"textChannel","description":"<p>Default {@link Queue#textChannel}</p>","nullable":true,"type":[[["Discord","."],["TextChannel"]]]},{"name":"skip","description":"<p>Skip the playing song (if exists) and play the added song/playlist instantly</p>","type":[[["boolean"]]]},{"name":"unshift","description":"<p>Add the song/playlist to the beginning of the queue (after the playing song if exists)</p>","type":[[["boolean"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":14,"file":"CustomPlugin.ts","path":"src/struct"}},{"name":"validate","description":"<p>Check if the url is working with this plugin</p>","inherits":"Plugin#validate","inherited":true,"params":[{"name":"url","description":"<p>Input url</p>","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":32,"file":"Plugin.ts","path":"src/struct"}},{"name":"getStreamURL","description":"<p>Get the stream url from {@link Song#url}. Returns {@link Song#url} by default. Not needed if the plugin plays song from YouTube.</p>","inherits":"Plugin#getStreamURL","inherited":true,"params":[{"name":"url","description":"<p>Input url</p>","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["string",">"]]],"meta":{"line":40,"file":"Plugin.ts","path":"src/struct"}},{"name":"getRelatedSongs","description":"<p>(Optional) Get related songs from a supported url (Not needed to add {@link Song#related} and member is <code>null</code> because it will be added with this function later)</p>","inherits":"Plugin#getRelatedSongs","inherited":true,"params":[{"name":"url","description":"<p>Input url</p>","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["Array","<"],["Song",">>"]]],"meta":{"line":48,"file":"Plugin.ts","path":"src/struct"}}],"meta":{"line":5,"file":"CustomPlugin.ts","path":"src/struct"}},{"name":"ExtractorPlugin","description":"<p>Extractor Plugin</p>","extends":[[["Plugin"]]],"construct":{"name":"ExtractorPlugin","description":"<p>Create a extractor plugin</p>"},"props":[{"name":"type","description":"<p>Type of the plugin</p>","type":[[["\"custom","\""]],[["\"extractor","\""]]],"meta":{"line":14,"file":"Plugin.ts","path":"src/struct"}},{"name":"distube","description":"<p>DisTube</p>","type":[[["DisTube"]]],"meta":{"line":21,"file":"Plugin.ts","path":"src/struct"}},{"name":"handler","description":"<p>Handler</p>","type":[[["DisTubeHandler"]]],"meta":{"line":26,"file":"Plugin.ts","path":"src/struct"}}],"methods":[{"name":"resolve","description":"<p>Execute if the url is validated (Not needed to add {@link Song#related} because it will be added with {@link Plugin#getRelatedSongs})</p>","params":[{"name":"url","description":"<p>URL</p>","type":[[["string"]]]},{"name":"member","description":"<p>Requested user</p>","type":[[["Discord","."],["GuildMember"]]]}],"async":true,"returns":[[["Promise","<"],["Song","|"],["Array","<"],["Song",">|"],["Playlist",">"]]],"meta":{"line":14,"file":"ExtractorPlugin.ts","path":"src/struct"}},{"name":"validate","description":"<p>Check if the url is working with this plugin</p>","inherits":"Plugin#validate","inherited":true,"params":[{"name":"url","description":"<p>Input url</p>","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":32,"file":"Plugin.ts","path":"src/struct"}},{"name":"getStreamURL","description":"<p>Get the stream url from {@link Song#url}. Returns {@link Song#url} by default. Not needed if the plugin plays song from YouTube.</p>","inherits":"Plugin#getStreamURL","inherited":true,"params":[{"name":"url","description":"<p>Input url</p>","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["string",">"]]],"meta":{"line":40,"file":"Plugin.ts","path":"src/struct"}},{"name":"getRelatedSongs","description":"<p>(Optional) Get related songs from a supported url (Not needed to add {@link Song#related} and member is <code>null</code> because it will be added with this function later)</p>","inherits":"Plugin#getRelatedSongs","inherited":true,"params":[{"name":"url","description":"<p>Input url</p>","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["Array","<"],["Song",">>"]]],"meta":{"line":48,"file":"Plugin.ts","path":"src/struct"}}],"meta":{"line":5,"file":"ExtractorPlugin.ts","path":"src/struct"}},{"name":"Playlist","description":"<p>Class representing a playlist.</p>","construct":{"name":"Playlist","description":"<p>Create a playlist</p>","params":[{"name":"playlist","description":"<p>Playlist</p>","type":[[["Array","<"],["Song",">"]],[["PlaylistInfo"]]]},{"name":"member","description":"<p>Requested user</p>","type":[[["Discord","."],["GuildMember"]]]},{"name":"properties","description":"<p>Custom properties</p>","type":[[["Object"]]]}]},"props":[{"name":"source","description":"<p>The source of the playlist</p>","type":[[["string"]]],"meta":{"line":34,"file":"Playlist.ts","path":"src/struct"}},{"name":"songs","description":"<p>Playlist songs.</p>","type":[[["Array","<"],["Song",">"]]],"meta":{"line":39,"file":"Playlist.ts","path":"src/struct"}},{"name":"name","description":"<p>Playlist name.</p>","type":[[["string"]]],"meta":{"line":48,"file":"Playlist.ts","path":"src/struct"}},{"name":"url","description":"<p>Playlist URL.</p>","type":[[["string"]]],"meta":{"line":53,"file":"Playlist.ts","path":"src/struct"}},{"name":"thumbnail","description":"<p>Playlist thumbnail.</p>","type":[[["string"]]],"meta":{"line":58,"file":"Playlist.ts","path":"src/struct"}},{"name":"duration","description":"<p>Playlist duration in second.</p>","type":[[["number"]]],"meta":{"line":68,"file":"Playlist.ts","path":"src/struct"}},{"name":"formattedDuration","description":"<p>Formatted duration string <code>hh:mm:ss</code>.</p>","type":[[["string"]]],"meta":{"line":76,"file":"Playlist.ts","path":"src/struct"}},{"name":"member","description":"<p>User requested.</p>","type":[[["Discord","."],["GuildMember"]]],"meta":{"line":91,"file":"Playlist.ts","path":"src/struct"}},{"name":"user","description":"<p>User requested.</p>","type":[[["Discord","."],["User"]]],"meta":{"line":96,"file":"Playlist.ts","path":"src/struct"}}],"methods":[{"name":"_patchMember","access":"private","params":[{"name":"member","description":"<p>Requested user</p>","optional":true,"type":[[["Discord","."],["GuildMember"]]]}],"returns":[[["Playlist"]]],"meta":{"line":84,"file":"Playlist.ts","path":"src/struct"}}],"meta":{"line":6,"file":"Playlist.ts","path":"src/struct"}},{"name":"Plugin","description":"<p>DisTube Plugin</p>","access":"private","construct":{"name":"Plugin","description":"<p>Type of the plugin</p>"},"props":[{"name":"type","description":"<p>Type of the plugin</p>","type":[[["\"custom","\""]],[["\"extractor","\""]]],"meta":{"line":14,"file":"Plugin.ts","path":"src/struct"}},{"name":"distube","description":"<p>DisTube</p>","type":[[["DisTube"]]],"meta":{"line":21,"file":"Plugin.ts","path":"src/struct"}},{"name":"handler","description":"<p>Handler</p>","type":[[["DisTubeHandler"]]],"meta":{"line":26,"file":"Plugin.ts","path":"src/struct"}}],"methods":[{"name":"validate","description":"<p>Check if the url is working with this plugin</p>","params":[{"name":"url","description":"<p>Input url</p>","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":32,"file":"Plugin.ts","path":"src/struct"}},{"name":"getStreamURL","description":"<p>Get the stream url from {@link Song#url}. Returns {@link Song#url} by default. Not needed if the plugin plays song from YouTube.</p>","params":[{"name":"url","description":"<p>Input url</p>","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["string",">"]]],"meta":{"line":40,"file":"Plugin.ts","path":"src/struct"}},{"name":"getRelatedSongs","description":"<p>(Optional) Get related songs from a supported url (Not needed to add {@link Song#related} and member is <code>null</code> because it will be added with this function later)</p>","params":[{"name":"url","description":"<p>Input url</p>","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["Array","<"],["Song",">>"]]],"meta":{"line":48,"file":"Plugin.ts","path":"src/struct"}}],"meta":{"line":4,"file":"Plugin.ts","path":"src/struct"}},{"name":"Queue","description":"<p>Represents a queue.</p>","extends":[[["DisTubeBase"]]],"construct":{"name":"Queue","description":"<p>Create a queue for the guild</p>","params":[{"name":"distube","description":"<p>DisTube</p>","type":[[["DisTube"]]]},{"name":"voice","description":"<p>Voice connection</p>","type":[[["DisTubeVoice"]]]},{"name":"song","description":"<p>First song(s)</p>","type":[[["Song"]],[["Array","<"],["Song",">"]]]},{"name":"textChannel","description":"<p>Default text channel</p>","nullable":true,"type":[[["Discord","."],["TextChannel"]]]}]},"props":[{"name":"voice","description":"<p>Voice connection of this queue.</p>","type":[[["DisTubeVoice"]]],"meta":{"line":97,"file":"Queue.ts","path":"src/struct"}},{"name":"id","description":"<p>Queue id (Guild id)</p>","type":[[["Discord","."],["Snowflake"]]],"meta":{"line":102,"file":"Queue.ts","path":"src/struct"}},{"name":"volume","description":"<p>Get or set the stream volume. Default value: <code>50</code>.</p>","type":[[["number"]]],"meta":{"line":107,"file":"Queue.ts","path":"src/struct"}},{"name":"songs","description":"<p>List of songs in the queue (The first one is the playing song)</p>","type":[[["Array","<"],["Song",">"]]],"meta":{"line":112,"file":"Queue.ts","path":"src/struct"}},{"name":"previousSongs","description":"<p>List of the previous songs.</p>","type":[[["Array","<"],["Song",">"]]],"meta":{"line":117,"file":"Queue.ts","path":"src/struct"}},{"name":"stopped","description":"<p>Whether stream is currently stopped.</p>","access":"private","type":[[["boolean"]]],"meta":{"line":122,"file":"Queue.ts","path":"src/struct"}},{"name":"next","description":"<p>Whether or not the last song was skipped to next song.</p>","access":"private","type":[[["boolean"]]],"meta":{"line":128,"file":"Queue.ts","path":"src/struct"}},{"name":"prev","description":"<p>Whether or not the last song was skipped to previous song.</p>","access":"private","type":[[["boolean"]]],"meta":{"line":134,"file":"Queue.ts","path":"src/struct"}},{"name":"playing","description":"<p>Whether or not the stream is currently playing.</p>","type":[[["boolean"]]],"meta":{"line":140,"file":"Queue.ts","path":"src/struct"}},{"name":"paused","description":"<p>Whether or not the stream is currently paused.</p>","type":[[["boolean"]]],"meta":{"line":145,"file":"Queue.ts","path":"src/struct"}},{"name":"repeatMode","description":"<p>Type of repeat mode (<code>0</code> is disabled, <code>1</code> is repeating a song, <code>2</code> is repeating all the queue).\nDefault value: <code>0</code> (disabled)</p>","type":[[["number"]]],"meta":{"line":150,"file":"Queue.ts","path":"src/struct"}},{"name":"autoplay","description":"<p>Whether or not the autoplay mode is enabled.\nDefault value: <code>false</code></p>","type":[[["boolean"]]],"meta":{"line":156,"file":"Queue.ts","path":"src/struct"}},{"name":"filters","description":"<p>Enabled audio filters.\nAvailable filters: {@link Filters}</p>","type":[[["Array","<"],["string",">"]]],"meta":{"line":162,"file":"Queue.ts","path":"src/struct"}},{"name":"beginTime","description":"<p>What time in the song to begin (in seconds).</p>","type":[[["number"]]],"meta":{"line":168,"file":"Queue.ts","path":"src/struct"}},{"name":"textChannel","description":"<p>The text channel of the Queue. (Default: where the first command is called).</p>","nullable":true,"type":[[["Discord","."],["TextChannel"]]],"meta":{"line":173,"file":"Queue.ts","path":"src/struct"}},{"name":"emptyTimeout","description":"<p>Timeout for checking empty channel</p>","access":"private","type":[["*"]],"meta":{"line":178,"file":"Queue.ts","path":"src/struct"}},{"name":"taskQueue","description":"<p>Task queuing system</p>","access":"private","type":[[["TaskQueue"]]],"meta":{"line":184,"file":"Queue.ts","path":"src/struct"}},{"name":"formattedDuration","description":"<p>Formatted duration string.</p>","type":[[["string"]]],"meta":{"line":191,"file":"Queue.ts","path":"src/struct"}},{"name":"duration","description":"<p>Queue's duration.</p>","type":[[["number"]]],"meta":{"line":198,"file":"Queue.ts","path":"src/struct"}},{"name":"currentTime","description":"<p>What time in the song is playing (in seconds).</p>","type":[[["number"]]],"meta":{"line":205,"file":"Queue.ts","path":"src/struct"}},{"name":"formattedCurrentTime","description":"<p>Formatted {@link Queue#currentTime} string.</p>","type":[[["string"]]],"meta":{"line":212,"file":"Queue.ts","path":"src/struct"}},{"name":"voiceChannel","description":"<p>The voice channel playing in.</p>","type":[[["Discord","."],["VoiceChannel"]],[["Discord","."],["StageChannel"]],[["null"]]],"meta":{"line":219,"file":"Queue.ts","path":"src/struct"}},{"name":"distube","description":"<p>DisTube</p>","access":"private","type":[[["DisTube"]]],"meta":{"line":8,"file":"DisTubeBase.ts","path":"src/core"}},{"name":"queues","description":"<p>The queue manager</p>","access":"private","readonly":true,"type":[[["QueueManager"]]],"meta":{"line":34,"file":"DisTubeBase.ts","path":"src/core"}},{"name":"voices","description":"<p>The voice manager</p>","access":"private","readonly":true,"type":[[["DisTubeVoiceManager"]]],"meta":{"line":43,"file":"DisTubeBase.ts","path":"src/core"}},{"name":"client","description":"<p>Discord.js client</p>","access":"private","readonly":true,"type":[[["Discord","."],["Client"]]],"meta":{"line":52,"file":"DisTubeBase.ts","path":"src/core"}},{"name":"options","description":"<p>DisTube options</p>","access":"private","readonly":true,"type":[[["DisTubeOptions"]]],"meta":{"line":61,"file":"DisTubeBase.ts","path":"src/core"}},{"name":"handler","description":"<p>DisTube handler</p>","access":"private","readonly":true,"type":[[["DisTubeHandler"]]],"meta":{"line":70,"file":"DisTubeBase.ts","path":"src/core"}}],"methods":[{"name":"addToQueue","description":"<p>Add a Song or an array of Song to the queue</p>","params":[{"name":"song","description":"<p>Song to add</p>","type":[[["Song"]],[["Array","<"],["Song",">"]]]},{"name":"position","description":"<p>Position to add, &lt; 0 to add to the end of the queue</p>","optional":true,"default":-1,"type":[[["number"]]]},{"name":"queuing","description":"<p>Wether or not waiting for unfinished tasks</p>","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["Queue"]]],"description":"<p>The guild queue</p>"},"meta":{"line":232,"file":"Queue.ts","path":"src/struct"}},{"name":"pause","description":"<p>Pause the guild stream</p>","returns":{"types":[[["Queue"]]],"description":"<p>The guild queue</p>"},"meta":{"line":258,"file":"Queue.ts","path":"src/struct"}},{"name":"resume","description":"<p>Resume the guild stream</p>","returns":{"types":[[["Queue"]]],"description":"<p>The guild queue</p>"},"meta":{"line":269,"file":"Queue.ts","path":"src/struct"}},{"name":"setVolume","description":"<p>Set the guild stream's volume</p>","params":[{"name":"percent","description":"<p>The percentage of volume you want to set</p>","type":[[["number"]]]}],"returns":{"types":[[["Queue"]]],"description":"<p>The guild queue</p>"},"meta":{"line":280,"file":"Queue.ts","path":"src/struct"}},{"name":"skip","description":"<p>Skip the playing song</p>","async":true,"returns":{"types":[[["Promise","<"],["Song",">"]]],"description":"<p>The song will skip to</p>"},"meta":{"line":290,"file":"Queue.ts","path":"src/struct"}},{"name":"previous","description":"<p>Play the previous song</p>","async":true,"returns":{"types":[[["Song"]]],"description":"<p>The guild queue</p>"},"meta":{"line":311,"file":"Queue.ts","path":"src/struct"}},{"name":"shuffle","description":"<p>Shuffle the queue's songs</p>","async":true,"returns":{"types":[[["Promise","<"],["Queue",">"]]],"description":"<p>The guild queue</p>"},"meta":{"line":330,"file":"Queue.ts","path":"src/struct"}},{"name":"jump","description":"<p>Jump to the song position in the queue.\nThe next one is 1, 2,...\nThe previous one is -1, -2,...</p>","params":[{"name":"position","description":"<p>The song position to play</p>","type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Queue",">"]]],"description":"<p>The guild queue</p>"},"meta":{"line":349,"file":"Queue.ts","path":"src/struct"}},{"name":"setRepeatMode","description":"<p>Set the repeat mode of the guild queue.\nTurn off if repeat mode is the same value as new mode.\nToggle mode <code>(0 -&gt; 1 -&gt; 2 -&gt; 0...)</code>: <code>mode</code> is <code>undefined</code></p>","params":[{"name":"mode","description":"<p>The repeat modes <code>(0: disabled, 1: Repeat a song, 2: Repeat all the queue)</code></p>","optional":true,"nullable":true,"type":[[["number"]]]}],"returns":{"types":[[["number"]]],"description":"<p>The new repeat mode</p>"},"meta":{"line":389,"file":"Queue.ts","path":"src/struct"}},{"name":"setFilter","description":"<p>Enable or disable filter(s) of the queue.\nAvailable filters: {@link Filters}</p>","params":[{"name":"filter","description":"<p>A filter name, an array of filter name or <code>false</code> to clear all the filters</p>","type":[[["string"]],[["Array","<"],["string",">"]],[["false"]]]},{"name":"force","description":"<p>Force enable the input filter(s) even if it's enabled</p>","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":{"types":[[["Array","<"],["string",">"]]],"description":"<p>Enabled filters.</p>"},"meta":{"line":405,"file":"Queue.ts","path":"src/struct"}},{"name":"seek","description":"<p>Set the playing time to another position</p>","params":[{"name":"time","description":"<p>Time in seconds</p>","type":[[["number"]]]}],"returns":{"types":[[["Queue"]]],"description":"<p>The guild queue</p>"},"meta":{"line":437,"file":"Queue.ts","path":"src/struct"}},{"name":"addRelatedSong","description":"<p>Add a related song of the playing song to the queue</p>","async":true,"returns":{"types":[[["Promise","<"],["Song",">"]]],"description":"<p>The added song</p>"},"meta":{"line":449,"file":"Queue.ts","path":"src/struct"}},{"name":"stop","description":"<p>Stop the guild stream</p>","async":true,"meta":{"line":463,"file":"Queue.ts","path":"src/struct"}},{"name":"delete","description":"<p>Delete the queue</p>","meta":{"line":477,"file":"Queue.ts","path":"src/struct"}},{"name":"toggleAutoplay","description":"<p>Toggle autoplay mode</p>","returns":{"types":[[["boolean"]]],"description":"<p>Autoplay mode state</p>"},"meta":{"line":487,"file":"Queue.ts","path":"src/struct"}},{"name":"emit","description":"<p>Emit the {@link DisTube} of this base</p>","access":"private","inherits":"DisTubeBase#emit","inherited":true,"params":[{"name":"eventName","description":"<p>Event name</p>","type":[[["string"]]]},{"name":"args","description":"<p>arguments</p>","variable":true,"type":[[["any"]]]}],"returns":[[["boolean"]]],"meta":{"line":15,"file":"DisTubeBase.ts","path":"src/core"}},{"name":"emitError","description":"<p>Emit error event</p>","access":"private","inherits":"DisTubeBase#emitError","inherited":true,"params":[{"name":"error","description":"<p>error</p>","type":[[["Error"]]]},{"name":"channel","description":"<p>Text channel where the error is encountered.</p>","nullable":true,"type":[[["Discord","."],["TextChannel"]]]}],"meta":{"line":25,"file":"DisTubeBase.ts","path":"src/core"}}],"meta":{"line":6,"file":"Queue.ts","path":"src/struct"}},{"name":"SearchResult","description":"<p>Class representing a search result.</p>","construct":{"name":"SearchResult","description":"<p>Create a search result</p>","params":[{"name":"info","description":"<p>ytsr result</p>","type":[[["Object"]]]}]},"props":[{"name":"type","description":"<p>Type of SearchResult (<code>video</code> or <code>playlist</code>)</p>","type":[[["string"]]],"meta":{"line":29,"file":"SearchResult.ts","path":"src/struct"}},{"name":"id","description":"<p>YouTube video or playlist id</p>","type":[[["string"]]],"meta":{"line":34,"file":"SearchResult.ts","path":"src/struct"}},{"name":"name","description":"<p>Video or playlist title.</p>","type":[[["string"]]],"meta":{"line":39,"file":"SearchResult.ts","path":"src/struct"}},{"name":"url","description":"<p>Video or playlist URL.</p>","type":[[["string"]]],"meta":{"line":44,"file":"SearchResult.ts","path":"src/struct"}},{"name":"views","description":"<p>[Video only] Video or playlist views count</p>","type":[[["number"]]],"meta":{"line":51,"file":"SearchResult.ts","path":"src/struct"}},{"name":"isLive","description":"<p>[Video only] Indicates if the video is an active live.</p>","nullable":true,"type":[[["boolean"]]],"meta":{"line":56,"file":"SearchResult.ts","path":"src/struct"}},{"name":"duration","description":"<p>[Video only] Video duration.</p>","type":[[["number"]]],"meta":{"line":61,"file":"SearchResult.ts","path":"src/struct"}},{"name":"formattedDuration","description":"<p>[Video only] Formatted duration string <code>hh:mm:ss</code> or <code>mm:ss</code>.</p>","type":[[["string"]]],"meta":{"line":66,"file":"SearchResult.ts","path":"src/struct"}},{"name":"thumbnail","description":"<p>[Video only] Video thumbnail.</p>","nullable":true,"type":[[["string"]]],"meta":{"line":71,"file":"SearchResult.ts","path":"src/struct"}},{"name":"uploader","description":"<p>Song uploader</p>","type":[[["Object"]]],"props":[{"name":"name","description":"<p>Uploader name</p>","nullable":true,"type":[[["string"]]]},{"name":"url","description":"<p>Uploader url</p>","nullable":true,"type":[[["string"]]]}],"meta":{"line":79,"file":"SearchResult.ts","path":"src/struct"}}],"meta":{"line":13,"file":"SearchResult.ts","path":"src/struct"}},{"name":"Song","description":"<p>Class representing a song.\n<info>If {@link Song} is added from a YouTube {@link SearchResult} or {@link Playlist}, some info will be missing to save your resources.\nIt will be filled when emitting {@link DisTube#playSong} event.</p>\n<p>Missing info: {@link Song#likes}, {@link Song#dislikes}, {@link Song#streamURL}, {@link Song#related}, {@link Song#chapters}, {@link Song#age_restricted}</info></p>","construct":{"name":"Song","description":"<p>Create a Song</p>","params":[{"name":"info","description":"<p>Raw info</p>","type":[[["ytdl","."],["videoInfo"]],[["SearchResult"]],[["OtherSongInfo"]]]},{"name":"member","description":"<p>Requested user</p>","nullable":true,"type":[[["Discord","."],["GuildMember"]]]},{"name":"source","description":"<p>Song source</p>","default":"youtube","type":[[["string"]]]}]},"props":[{"name":"source","description":"<p>The source of the song</p>","type":[[["string"]]],"meta":{"line":59,"file":"Song.ts","path":"src/struct"}},{"name":"formats","description":"<p>Stream formats (Available if the song is from YouTube and playing)</p>","access":"private","nullable":true,"type":[[["Array","<"],["ytdl","."],["videoFormat",">"]]],"meta":{"line":76,"file":"Song.ts","path":"src/struct"}},{"name":"id","description":"<p>YouTube video id</p>","nullable":true,"type":[[["string"]]],"meta":{"line":93,"file":"Song.ts","path":"src/struct"}},{"name":"name","description":"<p>Song name aka video title.</p>","nullable":true,"type":[[["string"]]],"meta":{"line":98,"file":"Song.ts","path":"src/struct"}},{"name":"isLive","description":"<p>Indicates if the video is an active live.</p>","type":[[["boolean"]]],"meta":{"line":103,"file":"Song.ts","path":"src/struct"}},{"name":"duration","description":"<p>Song duration.</p>","type":[[["number"]]],"meta":{"line":108,"file":"Song.ts","path":"src/struct"}},{"name":"formattedDuration","description":"<p>Formatted duration string (<code>hh:mm:ss</code>, <code>mm:ss</code> or <code>Live</code>).</p>","nullable":true,"type":[[["string"]]],"meta":{"line":113,"file":"Song.ts","path":"src/struct"}},{"name":"url","description":"<p>Song URL.</p>","type":[[["string"]]],"meta":{"line":118,"file":"Song.ts","path":"src/struct"}},{"name":"streamURL","description":"<p>Stream / Download URL (Available if the song is playing)</p>","nullable":true,"type":[[["string"]]],"meta":{"line":123,"file":"Song.ts","path":"src/struct"}},{"name":"thumbnail","description":"<p>Song thumbnail.</p>","nullable":true,"type":[[["string"]]],"meta":{"line":128,"file":"Song.ts","path":"src/struct"}},{"name":"related","description":"<p>Related songs</p>","type":[[["Array","<"],["Song",">"]]],"meta":{"line":136,"file":"Song.ts","path":"src/struct"}},{"name":"views","description":"<p>Song views count</p>","type":[[["number"]]],"meta":{"line":141,"file":"Song.ts","path":"src/struct"}},{"name":"likes","description":"<p>Song like count</p>","type":[[["number"]]],"meta":{"line":146,"file":"Song.ts","path":"src/struct"}},{"name":"dislikes","description":"<p>Song dislike count</p>","type":[[["number"]]],"meta":{"line":151,"file":"Song.ts","path":"src/struct"}},{"name":"uploader","description":"<p>Song uploader</p>","type":[[["Object"]]],"props":[{"name":"name","description":"<p>Uploader name</p>","nullable":true,"type":[[["string"]]]},{"name":"url","description":"<p>Uploader url</p>","nullable":true,"type":[[["string"]]]}],"meta":{"line":156,"file":"Song.ts","path":"src/struct"}},{"name":"age_restricted","description":"<p>Whether or not an age-restricted content</p>","type":[[["boolean"]]],"meta":{"line":166,"file":"Song.ts","path":"src/struct"}},{"name":"chapters","description":"<p>Chapters information (YouTube only)</p>","type":[[["Array","<"],["Chapter",">"]]],"meta":{"line":176,"file":"Song.ts","path":"src/struct"}},{"name":"reposts","description":"<p>Song repost count</p>","type":[[["number"]]],"meta":{"line":181,"file":"Song.ts","path":"src/struct"}},{"name":"playlist","description":"<p>The playlist added this song</p>","nullable":true,"type":[[["Playlist"]]],"meta":{"line":224,"file":"Song.ts","path":"src/struct"}},{"name":"member","description":"<p>User requested</p>","nullable":true,"type":[[["Discord","."],["GuildMember"]]],"meta":{"line":239,"file":"Song.ts","path":"src/struct"}},{"name":"user","description":"<p>User requested</p>","nullable":true,"type":[[["Discord","."],["User"]]],"meta":{"line":244,"file":"Song.ts","path":"src/struct"}}],"methods":[{"name":"_patchOther","description":"<p>Patch data from other source</p>","access":"private","params":[{"name":"info","description":"<p>Video info</p>","type":[[["OtherSongInfo"]]]}],"meta":{"line":188,"file":"Song.ts","path":"src/struct"}},{"name":"_patchPlaylist","access":"private","params":[{"name":"playlist","description":"<p>Playlist</p>","type":[[["Playlist"]]]},{"name":"member","description":"<p>Requested user</p>","optional":true,"type":[[["Discord","."],["GuildMember"]]]}],"returns":[[["Song"]]],"meta":{"line":215,"file":"Song.ts","path":"src/struct"}},{"name":"_patchMember","access":"private","params":[{"name":"member","description":"<p>Requested user</p>","optional":true,"type":[[["Discord","."],["GuildMember"]]]}],"returns":[[["Song"]]],"meta":{"line":232,"file":"Song.ts","path":"src/struct"}}],"meta":{"line":7,"file":"Song.ts","path":"src/struct"}},{"name":"TaskQueue","description":"<p>Task queuing system</p>","access":"private","props":[{"name":"remaining","description":"<p>The remaining number of tasks</p>","type":[[["number"]]],"meta":{"line":43,"file":"TaskQueue.ts","path":"src/struct"}},{"name":"hasResolveTask","description":"<p>Whether or not having a resolving info task</p>","type":[[["boolean"]]],"meta":{"line":51,"file":"TaskQueue.ts","path":"src/struct"}}],"methods":[{"name":"queuing","description":"<p>Waits for last task finished and queues a new task</p>","params":[{"name":"resolveInfo","description":"<p>Whether the task is a resolving info task</p>","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":25,"file":"TaskQueue.ts","path":"src/struct"}},{"name":"resolve","description":"<p>Removes the finished task and processes the next task</p>","meta":{"line":36,"file":"TaskQueue.ts","path":"src/struct"}}],"meta":{"line":13,"file":"TaskQueue.ts","path":"src/struct"}}],"interfaces":[],"typedefs":[{"name":"DefaultFilters","description":"<p>Default DisTube audio filters.</p>","type":[[["Object"]]],"props":[{"name":"3d","description":"<p>3d</p>","type":[[["string"]]]},{"name":"bassboost","description":"<p>bassboost</p>","type":[[["string"]]]},{"name":"echo","description":"<p>echo</p>","type":[[["string"]]]},{"name":"karaoke","description":"<p>karaoke</p>","type":[[["string"]]]},{"name":"nightcore","description":"<p>nightcore</p>","type":[[["string"]]]},{"name":"vaporwave","description":"<p>vaporwave</p>","type":[[["string"]]]},{"name":"flanger","description":"<p>flanger</p>","type":[[["string"]]]},{"name":"gate","description":"<p>gate</p>","type":[[["string"]]]},{"name":"haas","description":"<p>haas</p>","type":[[["string"]]]},{"name":"reverse","description":"<p>reverse</p>","type":[[["string"]]]},{"name":"surround","description":"<p>surround</p>","type":[[["string"]]]},{"name":"mcompand","description":"<p>mcompand</p>","type":[[["string"]]]},{"name":"phaser","description":"<p>phaser</p>","type":[[["string"]]]},{"name":"tremolo","description":"<p>tremolo</p>","type":[[["string"]]]},{"name":"earwax","description":"<p>earwax</p>","type":[[["string"]]]}],"meta":{"line":3,"file":"constant.ts","path":"src"}},{"name":"DisTubeOptions","description":"<p>DisTube options.</p>","type":[[["Object"]]],"props":[{"name":"plugins","description":"<p>DisTube plugins.</p>","optional":true,"type":[[["Array","<"],["CustomPlugin","|"],["ExtractorPlugin",">"]]]},{"name":"emitNewSongOnly","description":"<p>If <code>true</code>, {@link DisTube#event:playSong} will not be emitted when looping a song or next song is the same as the previous one</p>","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"leaveOnEmpty","description":"<p>Whether or not leaving voice channel if the voice channel is empty after {@link DisTubeOptions}.emptyCooldown seconds.</p>","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"leaveOnFinish","description":"<p>Whether or not leaving voice channel when the queue ends.</p>","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"leaveOnStop","description":"<p>Whether or not leaving voice channel after using {@link DisTube#stop} function.</p>","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"savePreviousSongs","description":"<p>Whether or not saving the previous songs of the queue and enable {@link DisTube#previous} method</p>","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"searchSongs","description":"<p>Limit of search results emits in {@link DisTube#event:searchResult} event when {@link DisTube#play} method executed. If <code>searchSongs &lt;= 1</code>, play the first result</p>","optional":true,"default":0,"type":[[["number"]]]},{"name":"youtubeCookie","description":"<p>YouTube cookies. Read how to get it in {@link https://github.com/fent/node-ytdl-core/blob/997efdd5dd9063363f6ef668bb364e83970756e7/example/cookies.js#L6-L12|YTDL's Example}</p>","optional":true,"type":[[["string"]]]},{"name":"youtubeIdentityToken","description":"<p>If not given; ytdl-core will try to find it. You can find this by going to a video's watch page; viewing the source; and searching for &quot;ID_TOKEN&quot;.</p>","optional":true,"type":[[["string"]]]},{"name":"youtubeDL","description":"<p>Whether or not using youtube-dl.</p>","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"updateYouTubeDL","description":"<p>Whether or not updating youtube-dl automatically.</p>","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"customFilters","description":"<p>Override {@link defaultFilters} or add more ffmpeg filters. Example=<code>{ &quot;Filter name&quot;=&quot;Filter value&quot;; &quot;8d&quot;=&quot;apulsator=hz=0.075&quot; }</code></p>","optional":true,"type":[[["Filters"]]]},{"name":"ytdlOptions","description":"<p><code>ytdl-core</code> get info options</p>","optional":true,"type":[[["ytdl","."],["getInfoOptions"]]]},{"name":"searchCooldown","description":"<p>Built-in search cooldown in seconds (When searchSongs is bigger than 0)</p>","optional":true,"default":60,"type":[[["number"]]]},{"name":"emptyCooldown","description":"<p>Built-in leave on empty cooldown in seconds (When leaveOnEmpty is true)</p>","optional":true,"default":60,"type":[[["number"]]]},{"name":"nsfw","description":"<p>Whether or not playing age-restricted content and disabling safe search in non-NSFW channel.</p>","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"emitAddListWhenCreatingQueue","description":"<p>Whether or not emitting <code>addList</code> event when creating a new Queue</p>","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"emitAddSongWhenCreatingQueue","description":"<p>Whether or not emitting <code>addSong</code> event when creating a new Queue</p>","optional":true,"default":true,"type":[[["boolean"]]]}],"meta":{"line":40,"file":"constant.ts","path":"src"}},{"name":"GuildIDResolvable","description":"<p>Data that can be resolved to give a guild ID string. This can be:</p>\n<ul>\n<li>A guild ID string | a guild {@link https://discord.js.org/#/docs/main/master/class/Snowflake|Snowflake}</li>\n<li>A {@link https://discord.js.org/#/docs/main/master/class/Guild|Guild}</li>\n<li>A {@link https://discord.js.org/#/docs/main/master/class/Message|Message}</li>\n<li>A {@link https://discord.js.org/#/docs/main/master/class/TextChannel|TextChannel}</li>\n<li>A {@link https://discord.js.org/#/docs/main/master/class/VoiceChannel|VoiceChannel}</li>\n<li>A {@link https://discord.js.org/#/docs/main/master/class/StageChannel|StageChannel}</li>\n<li>A {@link https://discord.js.org/#/docs/main/master/class/VoiceState|VoiceState}</li>\n<li>A {@link https://discord.js.org/#/docs/main/master/class/GuildMember|GuildMember}</li>\n<li>A {@link https://discord.js.org/#/docs/main/master/class/Interaction|Interaction}</li>\n<li>A {@link Queue}</li>\n<li>A {@link DisTubeVoice}</li>\n</ul>","type":[[["Discord","."],["Snowflake"]],[["Discord","."],["Message"]],[["Discord","."],["VoiceChannel"]],[["Discord","."],["StageChannel"]],[["Discord","."],["VoiceState"]],[["Discord","."],["TextChannel"]],[["Discord","."],["GuildMember"]],[["Discord","."],["Interaction"]],[["DisTubeVoice"]],[["Queue"]],[["string"]]],"meta":{"line":81,"file":"constant.ts","path":"src"}},{"name":"Filters","description":"<p>FFmpeg Filters</p>\n<pre class=\"prettyprint source\"><code>{\n  &quot;Filter Name&quot;: &quot;Filter Value&quot;,\n  &quot;bassboost&quot;:   &quot;bass=g=10&quot;\n}\n</code></pre>","see":["{@link defaultFilters}"],"type":[[["Object","<"],["string",", "],["string",">"]]],"meta":{"line":96,"file":"constant.ts","path":"src"}},{"name":"Chapter","type":[[["Object"]]],"props":[{"name":"title","description":"<p>Chapter title</p>","type":[[["string"]]]},{"name":"start_time","description":"<p>Chapter start time in seconds</p>","type":[[["number"]]]}],"meta":{"line":171,"file":"Song.ts","path":"src/struct"}}],"externals":[]}